{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UseGuards = void 0;\n\nconst constants_1 = require(\"../../constants\");\n\nconst extend_metadata_util_1 = require(\"../../utils/extend-metadata.util\");\n\nconst shared_utils_1 = require(\"../../utils/shared.utils\");\n\nconst validate_each_util_1 = require(\"../../utils/validate-each.util\");\n/**\n * Decorator that binds guards to the scope of the controller or method,\n * depending on its context.\n *\n * When `@UseGuards` is used at the controller level, the guard will be\n * applied to every handler (method) in the controller.\n *\n * When `@UseGuards` is used at the individual handler level, the guard\n * will apply only to that specific method.\n *\n * @param guards a single guard instance or class, or a list of guard instances\n * or classes.\n *\n * @see [Guards](https://docs.nestjs.com/guards)\n *\n * @usageNotes\n * Guards can also be set up globally for all controllers and routes\n * using `app.useGlobalGuards()`.  [See here for details](https://docs.nestjs.com/guards#binding-guards)\n *\n * @publicApi\n */\n\n\nfunction UseGuards() {\n  for (var _len = arguments.length, guards = new Array(_len), _key = 0; _key < _len; _key++) {\n    guards[_key] = arguments[_key];\n  }\n\n  return (target, key, descriptor) => {\n    const isGuardValid = guard => guard && ((0, shared_utils_1.isFunction)(guard) || (0, shared_utils_1.isFunction)(guard.canActivate));\n\n    if (descriptor) {\n      (0, validate_each_util_1.validateEach)(target.constructor, guards, isGuardValid, '@UseGuards', 'guard');\n      (0, extend_metadata_util_1.extendArrayMetadata)(constants_1.GUARDS_METADATA, guards, descriptor.value);\n      return descriptor;\n    }\n\n    (0, validate_each_util_1.validateEach)(target, guards, isGuardValid, '@UseGuards', 'guard');\n    (0, extend_metadata_util_1.extendArrayMetadata)(constants_1.GUARDS_METADATA, guards, target);\n    return target;\n  };\n}\n\nexports.UseGuards = UseGuards;","map":{"version":3,"names":["Object","defineProperty","exports","value","UseGuards","constants_1","require","extend_metadata_util_1","shared_utils_1","validate_each_util_1","guards","target","key","descriptor","isGuardValid","guard","isFunction","canActivate","validateEach","constructor","extendArrayMetadata","GUARDS_METADATA"],"sources":["C:/Users/Admin/Desktop/NikeShoes/node_modules/@nestjs/common/decorators/core/use-guards.decorator.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UseGuards = void 0;\nconst constants_1 = require(\"../../constants\");\nconst extend_metadata_util_1 = require(\"../../utils/extend-metadata.util\");\nconst shared_utils_1 = require(\"../../utils/shared.utils\");\nconst validate_each_util_1 = require(\"../../utils/validate-each.util\");\n/**\n * Decorator that binds guards to the scope of the controller or method,\n * depending on its context.\n *\n * When `@UseGuards` is used at the controller level, the guard will be\n * applied to every handler (method) in the controller.\n *\n * When `@UseGuards` is used at the individual handler level, the guard\n * will apply only to that specific method.\n *\n * @param guards a single guard instance or class, or a list of guard instances\n * or classes.\n *\n * @see [Guards](https://docs.nestjs.com/guards)\n *\n * @usageNotes\n * Guards can also be set up globally for all controllers and routes\n * using `app.useGlobalGuards()`.  [See here for details](https://docs.nestjs.com/guards#binding-guards)\n *\n * @publicApi\n */\nfunction UseGuards(...guards) {\n    return (target, key, descriptor) => {\n        const isGuardValid = (guard) => guard &&\n            ((0, shared_utils_1.isFunction)(guard) ||\n                (0, shared_utils_1.isFunction)(guard.canActivate));\n        if (descriptor) {\n            (0, validate_each_util_1.validateEach)(target.constructor, guards, isGuardValid, '@UseGuards', 'guard');\n            (0, extend_metadata_util_1.extendArrayMetadata)(constants_1.GUARDS_METADATA, guards, descriptor.value);\n            return descriptor;\n        }\n        (0, validate_each_util_1.validateEach)(target, guards, isGuardValid, '@UseGuards', 'guard');\n        (0, extend_metadata_util_1.extendArrayMetadata)(constants_1.GUARDS_METADATA, guards, target);\n        return target;\n    };\n}\nexports.UseGuards = UseGuards;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,SAAR,GAAoB,KAAK,CAAzB;;AACA,MAAMC,WAAW,GAAGC,OAAO,CAAC,iBAAD,CAA3B;;AACA,MAAMC,sBAAsB,GAAGD,OAAO,CAAC,kCAAD,CAAtC;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,0BAAD,CAA9B;;AACA,MAAMG,oBAAoB,GAAGH,OAAO,CAAC,gCAAD,CAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,SAAT,GAA8B;EAAA,kCAARM,MAAQ;IAARA,MAAQ;EAAA;;EAC1B,OAAO,CAACC,MAAD,EAASC,GAAT,EAAcC,UAAd,KAA6B;IAChC,MAAMC,YAAY,GAAIC,KAAD,IAAWA,KAAK,KAChC,CAAC,GAAGP,cAAc,CAACQ,UAAnB,EAA+BD,KAA/B,KACG,CAAC,GAAGP,cAAc,CAACQ,UAAnB,EAA+BD,KAAK,CAACE,WAArC,CAF6B,CAArC;;IAGA,IAAIJ,UAAJ,EAAgB;MACZ,CAAC,GAAGJ,oBAAoB,CAACS,YAAzB,EAAuCP,MAAM,CAACQ,WAA9C,EAA2DT,MAA3D,EAAmEI,YAAnE,EAAiF,YAAjF,EAA+F,OAA/F;MACA,CAAC,GAAGP,sBAAsB,CAACa,mBAA3B,EAAgDf,WAAW,CAACgB,eAA5D,EAA6EX,MAA7E,EAAqFG,UAAU,CAACV,KAAhG;MACA,OAAOU,UAAP;IACH;;IACD,CAAC,GAAGJ,oBAAoB,CAACS,YAAzB,EAAuCP,MAAvC,EAA+CD,MAA/C,EAAuDI,YAAvD,EAAqE,YAArE,EAAmF,OAAnF;IACA,CAAC,GAAGP,sBAAsB,CAACa,mBAA3B,EAAgDf,WAAW,CAACgB,eAA5D,EAA6EX,MAA7E,EAAqFC,MAArF;IACA,OAAOA,MAAP;EACH,CAZD;AAaH;;AACDT,OAAO,CAACE,SAAR,GAAoBA,SAApB"},"metadata":{},"sourceType":"script"}