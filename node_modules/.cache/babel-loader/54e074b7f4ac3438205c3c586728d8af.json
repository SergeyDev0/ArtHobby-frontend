{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UseInterceptors = void 0;\n\nconst constants_1 = require(\"../../constants\");\n\nconst extend_metadata_util_1 = require(\"../../utils/extend-metadata.util\");\n\nconst shared_utils_1 = require(\"../../utils/shared.utils\");\n\nconst validate_each_util_1 = require(\"../../utils/validate-each.util\");\n/**\n * Decorator that binds interceptors to the scope of the controller or method,\n * depending on its context.\n *\n * When `@UseInterceptors` is used at the controller level, the interceptor will\n * be applied to every handler (method) in the controller.\n *\n * When `@UseInterceptors` is used at the individual handler level, the interceptor\n * will apply only to that specific method.\n *\n * @param interceptors a single interceptor instance or class, or a list of\n * interceptor instances or classes.\n *\n * @see [Interceptors](https://docs.nestjs.com/interceptors)\n *\n * @usageNotes\n * Interceptors can also be set up globally for all controllers and routes\n * using `app.useGlobalInterceptors()`.  [See here for details](https://docs.nestjs.com/interceptors#binding-interceptors)\n *\n * @publicApi\n */\n\n\nfunction UseInterceptors() {\n  for (var _len = arguments.length, interceptors = new Array(_len), _key = 0; _key < _len; _key++) {\n    interceptors[_key] = arguments[_key];\n  }\n\n  return (target, key, descriptor) => {\n    const isInterceptorValid = interceptor => interceptor && ((0, shared_utils_1.isFunction)(interceptor) || (0, shared_utils_1.isFunction)(interceptor.intercept));\n\n    if (descriptor) {\n      (0, validate_each_util_1.validateEach)(target.constructor, interceptors, isInterceptorValid, '@UseInterceptors', 'interceptor');\n      (0, extend_metadata_util_1.extendArrayMetadata)(constants_1.INTERCEPTORS_METADATA, interceptors, descriptor.value);\n      return descriptor;\n    }\n\n    (0, validate_each_util_1.validateEach)(target, interceptors, isInterceptorValid, '@UseInterceptors', 'interceptor');\n    (0, extend_metadata_util_1.extendArrayMetadata)(constants_1.INTERCEPTORS_METADATA, interceptors, target);\n    return target;\n  };\n}\n\nexports.UseInterceptors = UseInterceptors;","map":{"version":3,"names":["Object","defineProperty","exports","value","UseInterceptors","constants_1","require","extend_metadata_util_1","shared_utils_1","validate_each_util_1","interceptors","target","key","descriptor","isInterceptorValid","interceptor","isFunction","intercept","validateEach","constructor","extendArrayMetadata","INTERCEPTORS_METADATA"],"sources":["C:/Users/Admin/Desktop/NikeShoes/node_modules/@nestjs/common/decorators/core/use-interceptors.decorator.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UseInterceptors = void 0;\nconst constants_1 = require(\"../../constants\");\nconst extend_metadata_util_1 = require(\"../../utils/extend-metadata.util\");\nconst shared_utils_1 = require(\"../../utils/shared.utils\");\nconst validate_each_util_1 = require(\"../../utils/validate-each.util\");\n/**\n * Decorator that binds interceptors to the scope of the controller or method,\n * depending on its context.\n *\n * When `@UseInterceptors` is used at the controller level, the interceptor will\n * be applied to every handler (method) in the controller.\n *\n * When `@UseInterceptors` is used at the individual handler level, the interceptor\n * will apply only to that specific method.\n *\n * @param interceptors a single interceptor instance or class, or a list of\n * interceptor instances or classes.\n *\n * @see [Interceptors](https://docs.nestjs.com/interceptors)\n *\n * @usageNotes\n * Interceptors can also be set up globally for all controllers and routes\n * using `app.useGlobalInterceptors()`.  [See here for details](https://docs.nestjs.com/interceptors#binding-interceptors)\n *\n * @publicApi\n */\nfunction UseInterceptors(...interceptors) {\n    return (target, key, descriptor) => {\n        const isInterceptorValid = (interceptor) => interceptor &&\n            ((0, shared_utils_1.isFunction)(interceptor) ||\n                (0, shared_utils_1.isFunction)(interceptor.intercept));\n        if (descriptor) {\n            (0, validate_each_util_1.validateEach)(target.constructor, interceptors, isInterceptorValid, '@UseInterceptors', 'interceptor');\n            (0, extend_metadata_util_1.extendArrayMetadata)(constants_1.INTERCEPTORS_METADATA, interceptors, descriptor.value);\n            return descriptor;\n        }\n        (0, validate_each_util_1.validateEach)(target, interceptors, isInterceptorValid, '@UseInterceptors', 'interceptor');\n        (0, extend_metadata_util_1.extendArrayMetadata)(constants_1.INTERCEPTORS_METADATA, interceptors, target);\n        return target;\n    };\n}\nexports.UseInterceptors = UseInterceptors;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,eAAR,GAA0B,KAAK,CAA/B;;AACA,MAAMC,WAAW,GAAGC,OAAO,CAAC,iBAAD,CAA3B;;AACA,MAAMC,sBAAsB,GAAGD,OAAO,CAAC,kCAAD,CAAtC;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,0BAAD,CAA9B;;AACA,MAAMG,oBAAoB,GAAGH,OAAO,CAAC,gCAAD,CAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,eAAT,GAA0C;EAAA,kCAAdM,YAAc;IAAdA,YAAc;EAAA;;EACtC,OAAO,CAACC,MAAD,EAASC,GAAT,EAAcC,UAAd,KAA6B;IAChC,MAAMC,kBAAkB,GAAIC,WAAD,IAAiBA,WAAW,KAClD,CAAC,GAAGP,cAAc,CAACQ,UAAnB,EAA+BD,WAA/B,KACG,CAAC,GAAGP,cAAc,CAACQ,UAAnB,EAA+BD,WAAW,CAACE,SAA3C,CAF+C,CAAvD;;IAGA,IAAIJ,UAAJ,EAAgB;MACZ,CAAC,GAAGJ,oBAAoB,CAACS,YAAzB,EAAuCP,MAAM,CAACQ,WAA9C,EAA2DT,YAA3D,EAAyEI,kBAAzE,EAA6F,kBAA7F,EAAiH,aAAjH;MACA,CAAC,GAAGP,sBAAsB,CAACa,mBAA3B,EAAgDf,WAAW,CAACgB,qBAA5D,EAAmFX,YAAnF,EAAiGG,UAAU,CAACV,KAA5G;MACA,OAAOU,UAAP;IACH;;IACD,CAAC,GAAGJ,oBAAoB,CAACS,YAAzB,EAAuCP,MAAvC,EAA+CD,YAA/C,EAA6DI,kBAA7D,EAAiF,kBAAjF,EAAqG,aAArG;IACA,CAAC,GAAGP,sBAAsB,CAACa,mBAA3B,EAAgDf,WAAW,CAACgB,qBAA5D,EAAmFX,YAAnF,EAAiGC,MAAjG;IACA,OAAOA,MAAP;EACH,CAZD;AAaH;;AACDT,OAAO,CAACE,eAAR,GAA0BA,eAA1B"},"metadata":{},"sourceType":"script"}