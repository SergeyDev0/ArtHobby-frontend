{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ParseEnumPipe = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst index_1 = require(\"../index\");\n\nconst http_error_by_code_util_1 = require(\"../utils/http-error-by-code.util\");\n/**\n * Defines the built-in ParseEnum Pipe\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\n\n\nlet ParseEnumPipe = class ParseEnumPipe {\n  constructor(enumType, options) {\n    this.enumType = enumType;\n\n    if (!enumType) {\n      throw new Error(`\"ParseEnumPipe\" requires \"enumType\" argument specified (to validate input values).`);\n    }\n\n    options = options || {};\n    const {\n      exceptionFactory,\n      errorHttpStatusCode = index_1.HttpStatus.BAD_REQUEST\n    } = options;\n\n    this.exceptionFactory = exceptionFactory || (error => new http_error_by_code_util_1.HttpErrorByCode[errorHttpStatusCode](error));\n  }\n  /**\n   * Method that accesses and performs optional transformation on argument for\n   * in-flight requests.\n   *\n   * @param value currently processed route argument\n   * @param metadata contains metadata about the currently processed route argument\n   */\n\n\n  async transform(value, metadata) {\n    if (!this.isEnum(value)) {\n      throw this.exceptionFactory('Validation failed (enum string is expected)');\n    }\n\n    return value;\n  }\n\n  isEnum(value) {\n    const enumValues = Object.keys(this.enumType).map(item => this.enumType[item]);\n    return enumValues.includes(value);\n  }\n\n};\nParseEnumPipe = tslib_1.__decorate([(0, index_1.Injectable)(), tslib_1.__param(1, (0, index_1.Optional)()), tslib_1.__metadata(\"design:paramtypes\", [Object, Object])], ParseEnumPipe);\nexports.ParseEnumPipe = ParseEnumPipe;","map":{"version":3,"names":["Object","defineProperty","exports","value","ParseEnumPipe","tslib_1","require","index_1","http_error_by_code_util_1","constructor","enumType","options","Error","exceptionFactory","errorHttpStatusCode","HttpStatus","BAD_REQUEST","error","HttpErrorByCode","transform","metadata","isEnum","enumValues","keys","map","item","includes","__decorate","Injectable","__param","Optional","__metadata"],"sources":["C:/Users/Admin/Desktop/NikeShoes/node_modules/@nestjs/common/pipes/parse-enum.pipe.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ParseEnumPipe = void 0;\nconst tslib_1 = require(\"tslib\");\nconst index_1 = require(\"../index\");\nconst http_error_by_code_util_1 = require(\"../utils/http-error-by-code.util\");\n/**\n * Defines the built-in ParseEnum Pipe\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\nlet ParseEnumPipe = class ParseEnumPipe {\n    constructor(enumType, options) {\n        this.enumType = enumType;\n        if (!enumType) {\n            throw new Error(`\"ParseEnumPipe\" requires \"enumType\" argument specified (to validate input values).`);\n        }\n        options = options || {};\n        const { exceptionFactory, errorHttpStatusCode = index_1.HttpStatus.BAD_REQUEST } = options;\n        this.exceptionFactory =\n            exceptionFactory ||\n                (error => new http_error_by_code_util_1.HttpErrorByCode[errorHttpStatusCode](error));\n    }\n    /**\n     * Method that accesses and performs optional transformation on argument for\n     * in-flight requests.\n     *\n     * @param value currently processed route argument\n     * @param metadata contains metadata about the currently processed route argument\n     */\n    async transform(value, metadata) {\n        if (!this.isEnum(value)) {\n            throw this.exceptionFactory('Validation failed (enum string is expected)');\n        }\n        return value;\n    }\n    isEnum(value) {\n        const enumValues = Object.keys(this.enumType).map(item => this.enumType[item]);\n        return enumValues.includes(value);\n    }\n};\nParseEnumPipe = tslib_1.__decorate([\n    (0, index_1.Injectable)(),\n    tslib_1.__param(1, (0, index_1.Optional)()),\n    tslib_1.__metadata(\"design:paramtypes\", [Object, Object])\n], ParseEnumPipe);\nexports.ParseEnumPipe = ParseEnumPipe;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,aAAR,GAAwB,KAAK,CAA7B;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,OAAD,CAAvB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAME,yBAAyB,GAAGF,OAAO,CAAC,kCAAD,CAAzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIF,aAAa,GAAG,MAAMA,aAAN,CAAoB;EACpCK,WAAW,CAACC,QAAD,EAAWC,OAAX,EAAoB;IAC3B,KAAKD,QAAL,GAAgBA,QAAhB;;IACA,IAAI,CAACA,QAAL,EAAe;MACX,MAAM,IAAIE,KAAJ,CAAW,oFAAX,CAAN;IACH;;IACDD,OAAO,GAAGA,OAAO,IAAI,EAArB;IACA,MAAM;MAAEE,gBAAF;MAAoBC,mBAAmB,GAAGP,OAAO,CAACQ,UAAR,CAAmBC;IAA7D,IAA6EL,OAAnF;;IACA,KAAKE,gBAAL,GACIA,gBAAgB,KACXI,KAAK,IAAI,IAAIT,yBAAyB,CAACU,eAA1B,CAA0CJ,mBAA1C,CAAJ,CAAmEG,KAAnE,CADE,CADpB;EAGH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACmB,MAATE,SAAS,CAAChB,KAAD,EAAQiB,QAAR,EAAkB;IAC7B,IAAI,CAAC,KAAKC,MAAL,CAAYlB,KAAZ,CAAL,EAAyB;MACrB,MAAM,KAAKU,gBAAL,CAAsB,6CAAtB,CAAN;IACH;;IACD,OAAOV,KAAP;EACH;;EACDkB,MAAM,CAAClB,KAAD,EAAQ;IACV,MAAMmB,UAAU,GAAGtB,MAAM,CAACuB,IAAP,CAAY,KAAKb,QAAjB,EAA2Bc,GAA3B,CAA+BC,IAAI,IAAI,KAAKf,QAAL,CAAce,IAAd,CAAvC,CAAnB;IACA,OAAOH,UAAU,CAACI,QAAX,CAAoBvB,KAApB,CAAP;EACH;;AA5BmC,CAAxC;AA8BAC,aAAa,GAAGC,OAAO,CAACsB,UAAR,CAAmB,CAC/B,CAAC,GAAGpB,OAAO,CAACqB,UAAZ,GAD+B,EAE/BvB,OAAO,CAACwB,OAAR,CAAgB,CAAhB,EAAmB,CAAC,GAAGtB,OAAO,CAACuB,QAAZ,GAAnB,CAF+B,EAG/BzB,OAAO,CAAC0B,UAAR,CAAmB,mBAAnB,EAAwC,CAAC/B,MAAD,EAASA,MAAT,CAAxC,CAH+B,CAAnB,EAIbI,aAJa,CAAhB;AAKAF,OAAO,CAACE,aAAR,GAAwBA,aAAxB"},"metadata":{},"sourceType":"script"}