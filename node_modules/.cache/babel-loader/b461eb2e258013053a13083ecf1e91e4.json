{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InternalServerErrorException = void 0;\n\nconst http_status_enum_1 = require(\"../enums/http-status.enum\");\n\nconst http_exception_1 = require(\"./http.exception\");\n/**\n * Defines an HTTP exception for *Internal Server Error* type errors.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n *\n * @publicApi\n */\n\n\nclass InternalServerErrorException extends http_exception_1.HttpException {\n  /**\n   * Instantiate an `InternalServerErrorException` Exception.\n   *\n   * @example\n   * `throw new InternalServerErrorException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 500.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 500.\n   * - `message`: the string `'Internal Server Error'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(objectOrError) {\n    let description = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Internal Server Error';\n    super(http_exception_1.HttpException.createBody(objectOrError, description, http_status_enum_1.HttpStatus.INTERNAL_SERVER_ERROR), http_status_enum_1.HttpStatus.INTERNAL_SERVER_ERROR);\n  }\n\n}\n\nexports.InternalServerErrorException = InternalServerErrorException;","map":{"version":3,"names":["Object","defineProperty","exports","value","InternalServerErrorException","http_status_enum_1","require","http_exception_1","HttpException","constructor","objectOrError","description","createBody","HttpStatus","INTERNAL_SERVER_ERROR"],"sources":["C:/Users/Admin/Desktop/NikeShoes/node_modules/@nestjs/common/exceptions/internal-server-error.exception.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InternalServerErrorException = void 0;\nconst http_status_enum_1 = require(\"../enums/http-status.enum\");\nconst http_exception_1 = require(\"./http.exception\");\n/**\n * Defines an HTTP exception for *Internal Server Error* type errors.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n *\n * @publicApi\n */\nclass InternalServerErrorException extends http_exception_1.HttpException {\n    /**\n     * Instantiate an `InternalServerErrorException` Exception.\n     *\n     * @example\n     * `throw new InternalServerErrorException()`\n     *\n     * @usageNotes\n     * The HTTP response status code will be 500.\n     * - The `objectOrError` argument defines the JSON response body or the message string.\n     * - The `description` argument contains a short description of the HTTP error.\n     *\n     * By default, the JSON response body contains two properties:\n     * - `statusCode`: this will be the value 500.\n     * - `message`: the string `'Internal Server Error'` by default; override this by supplying\n     * a string in the `objectOrError` parameter.\n     *\n     * If the parameter `objectOrError` is a string, the response body will contain an\n     * additional property, `error`, with a short description of the HTTP error. To override the\n     * entire JSON response body, pass an object instead. Nest will serialize the object\n     * and return it as the JSON response body.\n     *\n     * @param objectOrError string or object describing the error condition.\n     * @param description a short description of the HTTP error.\n     */\n    constructor(objectOrError, description = 'Internal Server Error') {\n        super(http_exception_1.HttpException.createBody(objectOrError, description, http_status_enum_1.HttpStatus.INTERNAL_SERVER_ERROR), http_status_enum_1.HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n}\nexports.InternalServerErrorException = InternalServerErrorException;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,4BAAR,GAAuC,KAAK,CAA5C;;AACA,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,2BAAD,CAAlC;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,kBAAD,CAAhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMF,4BAAN,SAA2CG,gBAAgB,CAACC,aAA5D,CAA0E;EACtE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,WAAW,CAACC,aAAD,EAAuD;IAAA,IAAvCC,WAAuC,uEAAzB,uBAAyB;IAC9D,MAAMJ,gBAAgB,CAACC,aAAjB,CAA+BI,UAA/B,CAA0CF,aAA1C,EAAyDC,WAAzD,EAAsEN,kBAAkB,CAACQ,UAAnB,CAA8BC,qBAApG,CAAN,EAAkIT,kBAAkB,CAACQ,UAAnB,CAA8BC,qBAAhK;EACH;;AA3BqE;;AA6B1EZ,OAAO,CAACE,4BAAR,GAAuCA,4BAAvC"},"metadata":{},"sourceType":"script"}