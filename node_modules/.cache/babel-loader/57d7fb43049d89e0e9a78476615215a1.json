{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ParseArrayPipe = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst injectable_decorator_1 = require(\"../decorators/core/injectable.decorator\");\n\nconst optional_decorator_1 = require(\"../decorators/core/optional.decorator\");\n\nconst http_status_enum_1 = require(\"../enums/http-status.enum\");\n\nconst http_error_by_code_util_1 = require(\"../utils/http-error-by-code.util\");\n\nconst shared_utils_1 = require(\"../utils/shared.utils\");\n\nconst validation_pipe_1 = require(\"./validation.pipe\");\n\nconst VALIDATION_ERROR_MESSAGE = 'Validation failed (parsable array expected)';\nconst DEFAULT_ARRAY_SEPARATOR = ',';\n/**\n * Defines the built-in ParseArray Pipe\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\n\nlet ParseArrayPipe = class ParseArrayPipe {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.options = options;\n    this.validationPipe = new validation_pipe_1.ValidationPipe(Object.assign({\n      transform: true,\n      validateCustomDecorators: true\n    }, options));\n    const {\n      exceptionFactory,\n      errorHttpStatusCode = http_status_enum_1.HttpStatus.BAD_REQUEST\n    } = options;\n\n    this.exceptionFactory = exceptionFactory || (error => new http_error_by_code_util_1.HttpErrorByCode[errorHttpStatusCode](error));\n  }\n  /**\n   * Method that accesses and performs optional transformation on argument for\n   * in-flight requests.\n   *\n   * @param value currently processed route argument\n   * @param metadata contains metadata about the currently processed route argument\n   */\n\n\n  async transform(value, metadata) {\n    if (!value && !this.options.optional) {\n      throw this.exceptionFactory(VALIDATION_ERROR_MESSAGE);\n    } else if ((0, shared_utils_1.isNil)(value) && this.options.optional) {\n      return value;\n    }\n\n    if (!Array.isArray(value)) {\n      if (!(0, shared_utils_1.isString)(value)) {\n        throw this.exceptionFactory(VALIDATION_ERROR_MESSAGE);\n      } else {\n        try {\n          value = value.trim().split(this.options.separator || DEFAULT_ARRAY_SEPARATOR);\n        } catch (_a) {\n          throw this.exceptionFactory(VALIDATION_ERROR_MESSAGE);\n        }\n      }\n    }\n\n    if (this.options.items) {\n      const validationMetadata = {\n        metatype: this.options.items,\n        type: 'query'\n      };\n      const isExpectedTypePrimitive = this.isExpectedTypePrimitive();\n\n      const toClassInstance = (item, index) => {\n        try {\n          item = JSON.parse(item);\n        } catch (_a) {}\n\n        if (isExpectedTypePrimitive) {\n          return this.validatePrimitive(item, index);\n        }\n\n        return this.validationPipe.transform(item, validationMetadata);\n      };\n\n      if (this.options.stopAtFirstError === false) {\n        // strict compare to \"false\" to make sure\n        // that this option is disabled by default\n        let errors = [];\n        const targetArray = value;\n\n        for (let i = 0; i < targetArray.length; i++) {\n          try {\n            targetArray[i] = await toClassInstance(targetArray[i]);\n          } catch (err) {\n            let message;\n\n            if (err.getResponse) {\n              const response = err.getResponse();\n\n              if (Array.isArray(response.message)) {\n                message = response.message.map(item => `[${i}] ${item}`);\n              } else {\n                message = `[${i}] ${response.message}`;\n              }\n            } else {\n              message = err;\n            }\n\n            errors = errors.concat(message);\n          }\n        }\n\n        if (errors.length > 0) {\n          throw this.exceptionFactory(errors);\n        }\n\n        return targetArray;\n      } else {\n        value = await Promise.all(value.map(toClassInstance));\n      }\n    }\n\n    return value;\n  }\n\n  isExpectedTypePrimitive() {\n    return [Boolean, Number, String].includes(this.options.items);\n  }\n\n  validatePrimitive(originalValue, index) {\n    if (this.options.items === Number) {\n      const value = originalValue !== null && originalValue !== '' ? +originalValue : NaN;\n\n      if (isNaN(value)) {\n        throw this.exceptionFactory(`${(0, shared_utils_1.isUndefined)(index) ? '' : `[${index}] `}item must be a number`);\n      }\n\n      return value;\n    } else if (this.options.items === String) {\n      if (!(0, shared_utils_1.isString)(originalValue)) {\n        return `${originalValue}`;\n      }\n    } else if (this.options.items === Boolean) {\n      if (typeof originalValue !== 'boolean') {\n        throw this.exceptionFactory(`${(0, shared_utils_1.isUndefined)(index) ? '' : `[${index}] `}item must be a boolean value`);\n      }\n    }\n\n    return originalValue;\n  }\n\n};\nParseArrayPipe = tslib_1.__decorate([(0, injectable_decorator_1.Injectable)(), tslib_1.__param(0, (0, optional_decorator_1.Optional)()), tslib_1.__metadata(\"design:paramtypes\", [Object])], ParseArrayPipe);\nexports.ParseArrayPipe = ParseArrayPipe;","map":{"version":3,"names":["Object","defineProperty","exports","value","ParseArrayPipe","tslib_1","require","injectable_decorator_1","optional_decorator_1","http_status_enum_1","http_error_by_code_util_1","shared_utils_1","validation_pipe_1","VALIDATION_ERROR_MESSAGE","DEFAULT_ARRAY_SEPARATOR","constructor","options","validationPipe","ValidationPipe","assign","transform","validateCustomDecorators","exceptionFactory","errorHttpStatusCode","HttpStatus","BAD_REQUEST","error","HttpErrorByCode","metadata","optional","isNil","Array","isArray","isString","trim","split","separator","_a","items","validationMetadata","metatype","type","isExpectedTypePrimitive","toClassInstance","item","index","JSON","parse","validatePrimitive","stopAtFirstError","errors","targetArray","i","length","err","message","getResponse","response","map","concat","Promise","all","Boolean","Number","String","includes","originalValue","NaN","isNaN","isUndefined","__decorate","Injectable","__param","Optional","__metadata"],"sources":["C:/Users/Admin/Desktop/NikeShoes/node_modules/@nestjs/common/pipes/parse-array.pipe.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ParseArrayPipe = void 0;\nconst tslib_1 = require(\"tslib\");\nconst injectable_decorator_1 = require(\"../decorators/core/injectable.decorator\");\nconst optional_decorator_1 = require(\"../decorators/core/optional.decorator\");\nconst http_status_enum_1 = require(\"../enums/http-status.enum\");\nconst http_error_by_code_util_1 = require(\"../utils/http-error-by-code.util\");\nconst shared_utils_1 = require(\"../utils/shared.utils\");\nconst validation_pipe_1 = require(\"./validation.pipe\");\nconst VALIDATION_ERROR_MESSAGE = 'Validation failed (parsable array expected)';\nconst DEFAULT_ARRAY_SEPARATOR = ',';\n/**\n * Defines the built-in ParseArray Pipe\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\nlet ParseArrayPipe = class ParseArrayPipe {\n    constructor(options = {}) {\n        this.options = options;\n        this.validationPipe = new validation_pipe_1.ValidationPipe(Object.assign({ transform: true, validateCustomDecorators: true }, options));\n        const { exceptionFactory, errorHttpStatusCode = http_status_enum_1.HttpStatus.BAD_REQUEST } = options;\n        this.exceptionFactory =\n            exceptionFactory ||\n                (error => new http_error_by_code_util_1.HttpErrorByCode[errorHttpStatusCode](error));\n    }\n    /**\n     * Method that accesses and performs optional transformation on argument for\n     * in-flight requests.\n     *\n     * @param value currently processed route argument\n     * @param metadata contains metadata about the currently processed route argument\n     */\n    async transform(value, metadata) {\n        if (!value && !this.options.optional) {\n            throw this.exceptionFactory(VALIDATION_ERROR_MESSAGE);\n        }\n        else if ((0, shared_utils_1.isNil)(value) && this.options.optional) {\n            return value;\n        }\n        if (!Array.isArray(value)) {\n            if (!(0, shared_utils_1.isString)(value)) {\n                throw this.exceptionFactory(VALIDATION_ERROR_MESSAGE);\n            }\n            else {\n                try {\n                    value = value\n                        .trim()\n                        .split(this.options.separator || DEFAULT_ARRAY_SEPARATOR);\n                }\n                catch (_a) {\n                    throw this.exceptionFactory(VALIDATION_ERROR_MESSAGE);\n                }\n            }\n        }\n        if (this.options.items) {\n            const validationMetadata = {\n                metatype: this.options.items,\n                type: 'query',\n            };\n            const isExpectedTypePrimitive = this.isExpectedTypePrimitive();\n            const toClassInstance = (item, index) => {\n                try {\n                    item = JSON.parse(item);\n                }\n                catch (_a) { }\n                if (isExpectedTypePrimitive) {\n                    return this.validatePrimitive(item, index);\n                }\n                return this.validationPipe.transform(item, validationMetadata);\n            };\n            if (this.options.stopAtFirstError === false) {\n                // strict compare to \"false\" to make sure\n                // that this option is disabled by default\n                let errors = [];\n                const targetArray = value;\n                for (let i = 0; i < targetArray.length; i++) {\n                    try {\n                        targetArray[i] = await toClassInstance(targetArray[i]);\n                    }\n                    catch (err) {\n                        let message;\n                        if (err.getResponse) {\n                            const response = err.getResponse();\n                            if (Array.isArray(response.message)) {\n                                message = response.message.map((item) => `[${i}] ${item}`);\n                            }\n                            else {\n                                message = `[${i}] ${response.message}`;\n                            }\n                        }\n                        else {\n                            message = err;\n                        }\n                        errors = errors.concat(message);\n                    }\n                }\n                if (errors.length > 0) {\n                    throw this.exceptionFactory(errors);\n                }\n                return targetArray;\n            }\n            else {\n                value = await Promise.all(value.map(toClassInstance));\n            }\n        }\n        return value;\n    }\n    isExpectedTypePrimitive() {\n        return [Boolean, Number, String].includes(this.options.items);\n    }\n    validatePrimitive(originalValue, index) {\n        if (this.options.items === Number) {\n            const value = originalValue !== null && originalValue !== '' ? +originalValue : NaN;\n            if (isNaN(value)) {\n                throw this.exceptionFactory(`${(0, shared_utils_1.isUndefined)(index) ? '' : `[${index}] `}item must be a number`);\n            }\n            return value;\n        }\n        else if (this.options.items === String) {\n            if (!(0, shared_utils_1.isString)(originalValue)) {\n                return `${originalValue}`;\n            }\n        }\n        else if (this.options.items === Boolean) {\n            if (typeof originalValue !== 'boolean') {\n                throw this.exceptionFactory(`${(0, shared_utils_1.isUndefined)(index) ? '' : `[${index}] `}item must be a boolean value`);\n            }\n        }\n        return originalValue;\n    }\n};\nParseArrayPipe = tslib_1.__decorate([\n    (0, injectable_decorator_1.Injectable)(),\n    tslib_1.__param(0, (0, optional_decorator_1.Optional)()),\n    tslib_1.__metadata(\"design:paramtypes\", [Object])\n], ParseArrayPipe);\nexports.ParseArrayPipe = ParseArrayPipe;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}