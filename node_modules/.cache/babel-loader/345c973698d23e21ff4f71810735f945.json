{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Inject = void 0;\n\nconst constants_1 = require(\"../../constants\");\n\nconst shared_utils_1 = require(\"../../utils/shared.utils\");\n/**\n * Decorator that marks a constructor parameter as a target for\n * [Dependency Injection (DI)](https://docs.nestjs.com/providers#dependency-injection).\n *\n * Any injected provider must be visible within the module scope (loosely\n * speaking, the containing module) of the class it is being injected into. This\n * can be done by:\n *\n * - defining the provider in the same module scope\n * - exporting the provider from one module scope and importing that module into the\n *   module scope of the class being injected into\n * - exporting the provider from a module that is marked as global using the\n *   `@Global()` decorator\n *\n * #### Injection tokens\n * Can be *types* (class names), *strings* or *symbols*. This depends on how the\n * provider with which it is associated was defined. Providers defined with the\n * `@Injectable()` decorator use the class name. Custom Providers may use strings\n * or symbols as the injection token.\n *\n * @param token lookup key for the provider to be injected (assigned to the constructor\n * parameter).\n *\n * @see [Providers](https://docs.nestjs.com/providers)\n * @see [Custom Providers](https://docs.nestjs.com/fundamentals/custom-providers)\n * @see [Injection Scopes](https://docs.nestjs.com/fundamentals/injection-scopes)\n *\n * @publicApi\n */\n\n\nfunction Inject(token) {\n  return (target, key, index) => {\n    const type = token || Reflect.getMetadata('design:type', target, key);\n\n    if (!(0, shared_utils_1.isUndefined)(index)) {\n      let dependencies = Reflect.getMetadata(constants_1.SELF_DECLARED_DEPS_METADATA, target) || [];\n      dependencies = [...dependencies, {\n        index,\n        param: type\n      }];\n      Reflect.defineMetadata(constants_1.SELF_DECLARED_DEPS_METADATA, dependencies, target);\n      return;\n    }\n\n    let properties = Reflect.getMetadata(constants_1.PROPERTY_DEPS_METADATA, target.constructor) || [];\n    properties = [...properties, {\n      key,\n      type\n    }];\n    Reflect.defineMetadata(constants_1.PROPERTY_DEPS_METADATA, properties, target.constructor);\n  };\n}\n\nexports.Inject = Inject;","map":{"version":3,"names":["Object","defineProperty","exports","value","Inject","constants_1","require","shared_utils_1","token","target","key","index","type","Reflect","getMetadata","isUndefined","dependencies","SELF_DECLARED_DEPS_METADATA","param","defineMetadata","properties","PROPERTY_DEPS_METADATA","constructor"],"sources":["C:/Users/Admin/Desktop/NikeShoes/node_modules/@nestjs/common/decorators/core/inject.decorator.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Inject = void 0;\nconst constants_1 = require(\"../../constants\");\nconst shared_utils_1 = require(\"../../utils/shared.utils\");\n/**\n * Decorator that marks a constructor parameter as a target for\n * [Dependency Injection (DI)](https://docs.nestjs.com/providers#dependency-injection).\n *\n * Any injected provider must be visible within the module scope (loosely\n * speaking, the containing module) of the class it is being injected into. This\n * can be done by:\n *\n * - defining the provider in the same module scope\n * - exporting the provider from one module scope and importing that module into the\n *   module scope of the class being injected into\n * - exporting the provider from a module that is marked as global using the\n *   `@Global()` decorator\n *\n * #### Injection tokens\n * Can be *types* (class names), *strings* or *symbols*. This depends on how the\n * provider with which it is associated was defined. Providers defined with the\n * `@Injectable()` decorator use the class name. Custom Providers may use strings\n * or symbols as the injection token.\n *\n * @param token lookup key for the provider to be injected (assigned to the constructor\n * parameter).\n *\n * @see [Providers](https://docs.nestjs.com/providers)\n * @see [Custom Providers](https://docs.nestjs.com/fundamentals/custom-providers)\n * @see [Injection Scopes](https://docs.nestjs.com/fundamentals/injection-scopes)\n *\n * @publicApi\n */\nfunction Inject(token) {\n    return (target, key, index) => {\n        const type = token || Reflect.getMetadata('design:type', target, key);\n        if (!(0, shared_utils_1.isUndefined)(index)) {\n            let dependencies = Reflect.getMetadata(constants_1.SELF_DECLARED_DEPS_METADATA, target) || [];\n            dependencies = [...dependencies, { index, param: type }];\n            Reflect.defineMetadata(constants_1.SELF_DECLARED_DEPS_METADATA, dependencies, target);\n            return;\n        }\n        let properties = Reflect.getMetadata(constants_1.PROPERTY_DEPS_METADATA, target.constructor) || [];\n        properties = [...properties, { key, type }];\n        Reflect.defineMetadata(constants_1.PROPERTY_DEPS_METADATA, properties, target.constructor);\n    };\n}\nexports.Inject = Inject;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,MAAR,GAAiB,KAAK,CAAtB;;AACA,MAAMC,WAAW,GAAGC,OAAO,CAAC,iBAAD,CAA3B;;AACA,MAAMC,cAAc,GAAGD,OAAO,CAAC,0BAAD,CAA9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,MAAT,CAAgBI,KAAhB,EAAuB;EACnB,OAAO,CAACC,MAAD,EAASC,GAAT,EAAcC,KAAd,KAAwB;IAC3B,MAAMC,IAAI,GAAGJ,KAAK,IAAIK,OAAO,CAACC,WAAR,CAAoB,aAApB,EAAmCL,MAAnC,EAA2CC,GAA3C,CAAtB;;IACA,IAAI,CAAC,CAAC,GAAGH,cAAc,CAACQ,WAAnB,EAAgCJ,KAAhC,CAAL,EAA6C;MACzC,IAAIK,YAAY,GAAGH,OAAO,CAACC,WAAR,CAAoBT,WAAW,CAACY,2BAAhC,EAA6DR,MAA7D,KAAwE,EAA3F;MACAO,YAAY,GAAG,CAAC,GAAGA,YAAJ,EAAkB;QAAEL,KAAF;QAASO,KAAK,EAAEN;MAAhB,CAAlB,CAAf;MACAC,OAAO,CAACM,cAAR,CAAuBd,WAAW,CAACY,2BAAnC,EAAgED,YAAhE,EAA8EP,MAA9E;MACA;IACH;;IACD,IAAIW,UAAU,GAAGP,OAAO,CAACC,WAAR,CAAoBT,WAAW,CAACgB,sBAAhC,EAAwDZ,MAAM,CAACa,WAA/D,KAA+E,EAAhG;IACAF,UAAU,GAAG,CAAC,GAAGA,UAAJ,EAAgB;MAAEV,GAAF;MAAOE;IAAP,CAAhB,CAAb;IACAC,OAAO,CAACM,cAAR,CAAuBd,WAAW,CAACgB,sBAAnC,EAA2DD,UAA3D,EAAuEX,MAAM,CAACa,WAA9E;EACH,CAXD;AAYH;;AACDpB,OAAO,CAACE,MAAR,GAAiBA,MAAjB"},"metadata":{},"sourceType":"script"}