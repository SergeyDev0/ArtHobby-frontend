{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HttpException = void 0;\n\nconst shared_utils_1 = require(\"../utils/shared.utils\");\n/**\n * Defines the base Nest HTTP exception, which is handled by the default\n * Exceptions Handler.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n *\n * @publicApi\n */\n\n\nclass HttpException extends Error {\n  /**\n   * Instantiate a plain HTTP Exception.\n   *\n   * @example\n   * `throw new HttpException()`\n   *\n   * @usageNotes\n   * The constructor arguments define the response and the HTTP response status code.\n   * - The `response` argument (required) defines the JSON response body.\n   * - The `status` argument (required) defines the HTTP Status Code.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: the Http Status Code.\n   * - `message`: a short description of the HTTP error by default; override this\n   * by supplying a string in the `response` parameter.\n   *\n   * To override the entire JSON response body, pass an object to the `createBody`\n   * method. Nest will serialize the object and return it as the JSON response body.\n   *\n   * The `status` argument is required, and should be a valid HTTP status code.\n   * Best practice is to use the `HttpStatus` enum imported from `nestjs/common`.\n   *\n   * @param response string or object describing the error condition.\n   * @param status HTTP response status code.\n   */\n  constructor(response, status) {\n    super();\n    this.response = response;\n    this.status = status;\n    this.initMessage();\n    this.initName();\n    this.initCause();\n  }\n  /**\n   * Configures error chaining support\n   *\n   * See:\n   * - https://nodejs.org/en/blog/release/v16.9.0/#error-cause\n   * - https://github.com/microsoft/TypeScript/issues/45167\n   */\n\n\n  initCause() {\n    if (this.response instanceof Error) {\n      this.cause = this.response;\n    }\n  }\n\n  initMessage() {\n    if ((0, shared_utils_1.isString)(this.response)) {\n      this.message = this.response;\n    } else if ((0, shared_utils_1.isObject)(this.response) && (0, shared_utils_1.isString)(this.response.message)) {\n      this.message = this.response.message;\n    } else if (this.constructor) {\n      this.message = this.constructor.name.match(/[A-Z][a-z]+|[0-9]+/g).join(' ');\n    }\n  }\n\n  initName() {\n    this.name = this.constructor.name;\n  }\n\n  getResponse() {\n    return this.response;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  static createBody(objectOrError, description, statusCode) {\n    if (!objectOrError) {\n      return {\n        statusCode,\n        message: description\n      };\n    }\n\n    return (0, shared_utils_1.isObject)(objectOrError) && !Array.isArray(objectOrError) ? objectOrError : {\n      statusCode,\n      message: objectOrError,\n      error: description\n    };\n  }\n\n}\n\nexports.HttpException = HttpException;","map":{"version":3,"names":["Object","defineProperty","exports","value","HttpException","shared_utils_1","require","Error","constructor","response","status","initMessage","initName","initCause","cause","isString","message","isObject","name","match","join","getResponse","getStatus","createBody","objectOrError","description","statusCode","Array","isArray","error"],"sources":["C:/Users/Admin/Desktop/NikeShoes/node_modules/@nestjs/common/exceptions/http.exception.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HttpException = void 0;\nconst shared_utils_1 = require(\"../utils/shared.utils\");\n/**\n * Defines the base Nest HTTP exception, which is handled by the default\n * Exceptions Handler.\n *\n * @see [Built-in HTTP exceptions](https://docs.nestjs.com/exception-filters#built-in-http-exceptions)\n *\n * @publicApi\n */\nclass HttpException extends Error {\n    /**\n     * Instantiate a plain HTTP Exception.\n     *\n     * @example\n     * `throw new HttpException()`\n     *\n     * @usageNotes\n     * The constructor arguments define the response and the HTTP response status code.\n     * - The `response` argument (required) defines the JSON response body.\n     * - The `status` argument (required) defines the HTTP Status Code.\n     *\n     * By default, the JSON response body contains two properties:\n     * - `statusCode`: the Http Status Code.\n     * - `message`: a short description of the HTTP error by default; override this\n     * by supplying a string in the `response` parameter.\n     *\n     * To override the entire JSON response body, pass an object to the `createBody`\n     * method. Nest will serialize the object and return it as the JSON response body.\n     *\n     * The `status` argument is required, and should be a valid HTTP status code.\n     * Best practice is to use the `HttpStatus` enum imported from `nestjs/common`.\n     *\n     * @param response string or object describing the error condition.\n     * @param status HTTP response status code.\n     */\n    constructor(response, status) {\n        super();\n        this.response = response;\n        this.status = status;\n        this.initMessage();\n        this.initName();\n        this.initCause();\n    }\n    /**\n     * Configures error chaining support\n     *\n     * See:\n     * - https://nodejs.org/en/blog/release/v16.9.0/#error-cause\n     * - https://github.com/microsoft/TypeScript/issues/45167\n     */\n    initCause() {\n        if (this.response instanceof Error) {\n            this.cause = this.response;\n        }\n    }\n    initMessage() {\n        if ((0, shared_utils_1.isString)(this.response)) {\n            this.message = this.response;\n        }\n        else if ((0, shared_utils_1.isObject)(this.response) &&\n            (0, shared_utils_1.isString)(this.response.message)) {\n            this.message = this.response.message;\n        }\n        else if (this.constructor) {\n            this.message = this.constructor.name\n                .match(/[A-Z][a-z]+|[0-9]+/g)\n                .join(' ');\n        }\n    }\n    initName() {\n        this.name = this.constructor.name;\n    }\n    getResponse() {\n        return this.response;\n    }\n    getStatus() {\n        return this.status;\n    }\n    static createBody(objectOrError, description, statusCode) {\n        if (!objectOrError) {\n            return { statusCode, message: description };\n        }\n        return (0, shared_utils_1.isObject)(objectOrError) && !Array.isArray(objectOrError)\n            ? objectOrError\n            : { statusCode, message: objectOrError, error: description };\n    }\n}\nexports.HttpException = HttpException;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,aAAR,GAAwB,KAAK,CAA7B;;AACA,MAAMC,cAAc,GAAGC,OAAO,CAAC,uBAAD,CAA9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMF,aAAN,SAA4BG,KAA5B,CAAkC;EAC9B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,WAAW,CAACC,QAAD,EAAWC,MAAX,EAAmB;IAC1B;IACA,KAAKD,QAAL,GAAgBA,QAAhB;IACA,KAAKC,MAAL,GAAcA,MAAd;IACA,KAAKC,WAAL;IACA,KAAKC,QAAL;IACA,KAAKC,SAAL;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIA,SAAS,GAAG;IACR,IAAI,KAAKJ,QAAL,YAAyBF,KAA7B,EAAoC;MAChC,KAAKO,KAAL,GAAa,KAAKL,QAAlB;IACH;EACJ;;EACDE,WAAW,GAAG;IACV,IAAI,CAAC,GAAGN,cAAc,CAACU,QAAnB,EAA6B,KAAKN,QAAlC,CAAJ,EAAiD;MAC7C,KAAKO,OAAL,GAAe,KAAKP,QAApB;IACH,CAFD,MAGK,IAAI,CAAC,GAAGJ,cAAc,CAACY,QAAnB,EAA6B,KAAKR,QAAlC,KACL,CAAC,GAAGJ,cAAc,CAACU,QAAnB,EAA6B,KAAKN,QAAL,CAAcO,OAA3C,CADC,EACoD;MACrD,KAAKA,OAAL,GAAe,KAAKP,QAAL,CAAcO,OAA7B;IACH,CAHI,MAIA,IAAI,KAAKR,WAAT,EAAsB;MACvB,KAAKQ,OAAL,GAAe,KAAKR,WAAL,CAAiBU,IAAjB,CACVC,KADU,CACJ,qBADI,EAEVC,IAFU,CAEL,GAFK,CAAf;IAGH;EACJ;;EACDR,QAAQ,GAAG;IACP,KAAKM,IAAL,GAAY,KAAKV,WAAL,CAAiBU,IAA7B;EACH;;EACDG,WAAW,GAAG;IACV,OAAO,KAAKZ,QAAZ;EACH;;EACDa,SAAS,GAAG;IACR,OAAO,KAAKZ,MAAZ;EACH;;EACgB,OAAVa,UAAU,CAACC,aAAD,EAAgBC,WAAhB,EAA6BC,UAA7B,EAAyC;IACtD,IAAI,CAACF,aAAL,EAAoB;MAChB,OAAO;QAAEE,UAAF;QAAcV,OAAO,EAAES;MAAvB,CAAP;IACH;;IACD,OAAO,CAAC,GAAGpB,cAAc,CAACY,QAAnB,EAA6BO,aAA7B,KAA+C,CAACG,KAAK,CAACC,OAAN,CAAcJ,aAAd,CAAhD,GACDA,aADC,GAED;MAAEE,UAAF;MAAcV,OAAO,EAAEQ,aAAvB;MAAsCK,KAAK,EAAEJ;IAA7C,CAFN;EAGH;;AA5E6B;;AA8ElCvB,OAAO,CAACE,aAAR,GAAwBA,aAAxB"},"metadata":{},"sourceType":"script"}