{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst concat_1 = require(\"./concat\");\n\nconst filter_1 = require(\"./filter\");\n\nconst flatten_1 = require(\"./flatten\");\n\nconst map_1 = require(\"./map\");\n\nconst slice_1 = require(\"./slice\");\n\nconst utils_1 = require(\"./utils\");\n\nconst zip_1 = require(\"./zip\");\n\nclass IteratorWithOperators {\n  /**\n   * @param source Iterator to wrap\n   */\n  constructor(source) {\n    this.source = source;\n  }\n  /**\n   * Returns a `{ value, done }` object that adheres to the Iterator protocol\n   */\n\n\n  next() {\n    return this.source.next();\n  }\n  /**\n   * The presence of this method makes the Iterator itself Iterable.\n   * This makes it possible to pass it to `for of` and Iterable-accepting functions like `Array.from()`\n   */\n\n\n  [Symbol.iterator]() {\n    return this;\n  }\n  /**\n   * Returns a new Iterator by running each element thru iteratee\n   */\n\n\n  map(iteratee) {\n    return new IteratorWithOperators(new map_1.MapIterator(this.source, iteratee));\n  }\n\n  filter(predicate) {\n    return new IteratorWithOperators(new filter_1.FilterIterator(this.source, predicate));\n  }\n  /**\n   * Returns a new Iterator concatenating the Iterator with an additional Iterator or Iterable\n   */\n\n\n  concat(collection) {\n    return new IteratorWithOperators(new concat_1.ConcatIterator([this.source, utils_1.toIterator(collection)]));\n  }\n  /**\n   * Returns a new Iterator that emits slice of the source with n elements taken from the beginning\n   *\n   * @param limit The number of elements to take.\n   */\n\n\n  take(limit) {\n    return new IteratorWithOperators(new slice_1.SliceIterator(this.source, 0, limit + 1));\n  }\n  /**\n   * Returns a new Iterator that emits slice of the source with n elements dropped from the beginning\n   *\n   * @param n The number of elements to drop.\n   */\n\n\n  drop(n) {\n    return new IteratorWithOperators(new slice_1.SliceIterator(this.source, n, Infinity));\n  }\n  /**\n   * Returns a new Iterator that emits a slice of the source\n   *\n   * @param {number} start Zero-based positive start index, inclusive\n   * @param {number} end Zero-based positive end index, exclusive, defaults to end of iterator\n   */\n\n\n  slice(start) {\n    let end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n    return new IteratorWithOperators(new slice_1.SliceIterator(this.source, start, end));\n  }\n  /**\n   * Returns a new Iterator that flattens items emitted by the Iterator a single level deep\n   */\n\n\n  flatten() {\n    return new IteratorWithOperators(new flatten_1.FlattenIterator(this.source));\n  }\n\n  reduce(iteratee, accumulator) {\n    let result;\n\n    if (accumulator === undefined) {\n      result = this.source.next();\n\n      if (result.done) {\n        throw new TypeError('Reduce of empty Iterator with no initial value');\n      }\n\n      accumulator = result.value;\n    }\n\n    while (true) {\n      result = this.source.next();\n\n      if (result.done) {\n        break;\n      }\n\n      accumulator = iteratee(accumulator, result.value);\n    }\n\n    return accumulator;\n  }\n\n  find(predicate) {\n    let result;\n\n    while (true) {\n      result = this.source.next();\n\n      if (result.done) {\n        return undefined;\n      }\n\n      if (predicate(result.value)) {\n        return result.value;\n      }\n    }\n  }\n  /**\n   * Iterates and checks if `value` is emitted by the Iterator\n   *\n   * @param value The value to search\n   */\n\n\n  includes(value) {\n    let result;\n\n    do {\n      result = this.source.next();\n\n      if (!result.done && result.value === value) {\n        return true;\n      }\n    } while (!result.done);\n\n    return false;\n  }\n  /**\n   * Iterates and checks if `predicate` returns truthy for any element emitted by the Iterator\n   */\n\n\n  some(predicate) {\n    let result;\n\n    do {\n      result = this.source.next();\n\n      if (!result.done && predicate(result.value)) {\n        return true;\n      }\n    } while (!result.done);\n\n    return false;\n  }\n  /**\n   * Iterates and checks if `predicate` returns truthy for all elements emitted by the Iterator\n   */\n\n\n  every(predicate) {\n    let result;\n\n    do {\n      result = this.source.next();\n\n      if (!result.done && !predicate(result.value)) {\n        return false;\n      }\n    } while (!result.done);\n\n    return true;\n  }\n  /**\n   * Iterates and invokes `iteratee` for every element emitted by the Iterator\n   */\n\n\n  forEach(iteratee) {\n    let result;\n\n    while (true) {\n      result = this.source.next();\n\n      if (result.done) {\n        break;\n      }\n\n      iteratee(result.value);\n    }\n  }\n  /**\n   * Iterates and joins all elements emitted by the Iterator together as a string separated by an optional separator\n   */\n\n\n  join() {\n    let separator = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ',';\n    let joined = '';\n    let result;\n\n    while (true) {\n      result = this.source.next();\n\n      if (result.done) {\n        break;\n      }\n\n      joined += separator + result.value;\n    }\n\n    return joined.substr(separator.length);\n  }\n  /**\n   * Iterates and returns all items emitted by the Iterator as an array.\n   * Equivalent to passing the Iterator to `Array.from()`\n   */\n\n\n  toArray() {\n    return Array.from(this);\n  }\n  /**\n   * Iterates and returns all items emitted by the Iterator as an ES6 Set.\n   * Equivalent to passing the Iterator to `new Set()`\n   */\n\n\n  toSet() {\n    const set = new Set();\n\n    while (true) {\n      const {\n        value,\n        done\n      } = this.next();\n\n      if (done) {\n        return set;\n      }\n\n      set.add(value);\n    }\n  }\n  /**\n   * Iterates and returns all `[key, value]` paris emitted by the Iterator as an ES6 Map.\n   * Equivalent to passing the Iterator to `new Map()`\n   */\n\n\n  toMap() {\n    return new Map(this);\n  }\n\n}\n\nexports.IteratorWithOperators = IteratorWithOperators;\n/**\n * Creates an Iterator with advanced chainable operator methods for any Iterable or Iterator\n */\n\nfunction iterate(collection) {\n  return new IteratorWithOperators(utils_1.toIterator(collection));\n}\n\nexports.iterate = iterate;\n/**\n * Creates an Iterator that emits pairs of values from the two passed Iterators\n */\n\nfunction zip(a, b) {\n  return new IteratorWithOperators(new zip_1.ZipIterator(utils_1.toIterator(a), utils_1.toIterator(b)));\n}\n\nexports.zip = zip;\nexports.default = iterate;","map":{"version":3,"mappings":"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","names":["IteratorWithOperators","constructor","source","next","Symbol","iterator","map","iteratee","map_1","filter","predicate","filter_1","concat","collection","concat_1","utils_1","take","limit","slice_1","drop","n","Infinity","slice","start","end","flatten","flatten_1","reduce","accumulator","result","undefined","done","TypeError","value","find","includes","some","every","forEach","join","separator","joined","substr","length","toArray","Array","from","toSet","set","Set","add","toMap","Map","exports","iterate","zip","a","b","zip_1"],"sources":["../src/iterate.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}