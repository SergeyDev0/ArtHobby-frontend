{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FileTypeValidator = void 0;\n\nconst file_validator_interface_1 = require(\"./file-validator.interface\");\n/**\n * Defines the built-in FileType File Validator. It validates incoming files mime-type\n * matching a string or a regular expression. Note that this validator uses a naive strategy\n * to check the mime-type and could be fooled if the client provided a file with renamed extension.\n * (for instance, renaming a 'malicious.bat' to 'malicious.jpeg'). To handle such security issues\n * with more reliability, consider checking against the file's [magic-numbers](https://en.wikipedia.org/wiki/Magic_number_%28programming%29)\n *\n * @see [File Validators](https://docs.nestjs.com/techniques/file-upload#validators)\n *\n * @publicApi\n */\n\n\nclass FileTypeValidator extends file_validator_interface_1.FileValidator {\n  buildErrorMessage() {\n    return `Validation failed (expected type is ${this.validationOptions.fileType})`;\n  }\n\n  isValid(file) {\n    if (!this.validationOptions) {\n      return true;\n    }\n\n    if (!file.mimetype) {\n      return false;\n    }\n\n    return Boolean(file.mimetype.match(this.validationOptions.fileType));\n  }\n\n}\n\nexports.FileTypeValidator = FileTypeValidator;","map":{"version":3,"names":["Object","defineProperty","exports","value","FileTypeValidator","file_validator_interface_1","require","FileValidator","buildErrorMessage","validationOptions","fileType","isValid","file","mimetype","Boolean","match"],"sources":["C:/Users/Admin/Desktop/NikeShoes/node_modules/@nestjs/common/pipes/file/file-type.validator.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FileTypeValidator = void 0;\nconst file_validator_interface_1 = require(\"./file-validator.interface\");\n/**\n * Defines the built-in FileType File Validator. It validates incoming files mime-type\n * matching a string or a regular expression. Note that this validator uses a naive strategy\n * to check the mime-type and could be fooled if the client provided a file with renamed extension.\n * (for instance, renaming a 'malicious.bat' to 'malicious.jpeg'). To handle such security issues\n * with more reliability, consider checking against the file's [magic-numbers](https://en.wikipedia.org/wiki/Magic_number_%28programming%29)\n *\n * @see [File Validators](https://docs.nestjs.com/techniques/file-upload#validators)\n *\n * @publicApi\n */\nclass FileTypeValidator extends file_validator_interface_1.FileValidator {\n    buildErrorMessage() {\n        return `Validation failed (expected type is ${this.validationOptions.fileType})`;\n    }\n    isValid(file) {\n        if (!this.validationOptions) {\n            return true;\n        }\n        if (!file.mimetype) {\n            return false;\n        }\n        return Boolean(file.mimetype.match(this.validationOptions.fileType));\n    }\n}\nexports.FileTypeValidator = FileTypeValidator;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,iBAAR,GAA4B,KAAK,CAAjC;;AACA,MAAMC,0BAA0B,GAAGC,OAAO,CAAC,4BAAD,CAA1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMF,iBAAN,SAAgCC,0BAA0B,CAACE,aAA3D,CAAyE;EACrEC,iBAAiB,GAAG;IAChB,OAAQ,uCAAsC,KAAKC,iBAAL,CAAuBC,QAAS,GAA9E;EACH;;EACDC,OAAO,CAACC,IAAD,EAAO;IACV,IAAI,CAAC,KAAKH,iBAAV,EAA6B;MACzB,OAAO,IAAP;IACH;;IACD,IAAI,CAACG,IAAI,CAACC,QAAV,EAAoB;MAChB,OAAO,KAAP;IACH;;IACD,OAAOC,OAAO,CAACF,IAAI,CAACC,QAAL,CAAcE,KAAd,CAAoB,KAAKN,iBAAL,CAAuBC,QAA3C,CAAD,CAAd;EACH;;AAZoE;;AAczER,OAAO,CAACE,iBAAR,GAA4BA,iBAA5B"},"metadata":{},"sourceType":"script"}