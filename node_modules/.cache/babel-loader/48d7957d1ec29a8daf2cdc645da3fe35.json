{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ParseFloatPipe = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst index_1 = require(\"../index\");\n\nconst http_error_by_code_util_1 = require(\"../utils/http-error-by-code.util\");\n/**\n * Defines the built-in ParseFloat Pipe\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\n\n\nlet ParseFloatPipe = class ParseFloatPipe {\n  constructor(options) {\n    options = options || {};\n    const {\n      exceptionFactory,\n      errorHttpStatusCode = index_1.HttpStatus.BAD_REQUEST\n    } = options;\n\n    this.exceptionFactory = exceptionFactory || (error => new http_error_by_code_util_1.HttpErrorByCode[errorHttpStatusCode](error));\n  }\n  /**\n   * Method that accesses and performs optional transformation on argument for\n   * in-flight requests.\n   *\n   * @param value currently processed route argument\n   * @param metadata contains metadata about the currently processed route argument\n   */\n\n\n  async transform(value, metadata) {\n    if (!this.isNumeric(value)) {\n      throw this.exceptionFactory('Validation failed (numeric string is expected)');\n    }\n\n    return parseFloat(value);\n  }\n  /**\n   * @param value currently processed route argument\n   * @returns `true` if `value` is a valid float number\n   */\n\n\n  isNumeric(value) {\n    return ['string', 'number'].includes(typeof value) && !isNaN(parseFloat(value)) && isFinite(value);\n  }\n\n};\nParseFloatPipe = tslib_1.__decorate([(0, index_1.Injectable)(), tslib_1.__param(0, (0, index_1.Optional)()), tslib_1.__metadata(\"design:paramtypes\", [Object])], ParseFloatPipe);\nexports.ParseFloatPipe = ParseFloatPipe;","map":{"version":3,"names":["Object","defineProperty","exports","value","ParseFloatPipe","tslib_1","require","index_1","http_error_by_code_util_1","constructor","options","exceptionFactory","errorHttpStatusCode","HttpStatus","BAD_REQUEST","error","HttpErrorByCode","transform","metadata","isNumeric","parseFloat","includes","isNaN","isFinite","__decorate","Injectable","__param","Optional","__metadata"],"sources":["C:/Users/Admin/Desktop/NikeShoes/node_modules/@nestjs/common/pipes/parse-float.pipe.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ParseFloatPipe = void 0;\nconst tslib_1 = require(\"tslib\");\nconst index_1 = require(\"../index\");\nconst http_error_by_code_util_1 = require(\"../utils/http-error-by-code.util\");\n/**\n * Defines the built-in ParseFloat Pipe\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\nlet ParseFloatPipe = class ParseFloatPipe {\n    constructor(options) {\n        options = options || {};\n        const { exceptionFactory, errorHttpStatusCode = index_1.HttpStatus.BAD_REQUEST } = options;\n        this.exceptionFactory =\n            exceptionFactory ||\n                (error => new http_error_by_code_util_1.HttpErrorByCode[errorHttpStatusCode](error));\n    }\n    /**\n     * Method that accesses and performs optional transformation on argument for\n     * in-flight requests.\n     *\n     * @param value currently processed route argument\n     * @param metadata contains metadata about the currently processed route argument\n     */\n    async transform(value, metadata) {\n        if (!this.isNumeric(value)) {\n            throw this.exceptionFactory('Validation failed (numeric string is expected)');\n        }\n        return parseFloat(value);\n    }\n    /**\n     * @param value currently processed route argument\n     * @returns `true` if `value` is a valid float number\n     */\n    isNumeric(value) {\n        return (['string', 'number'].includes(typeof value) &&\n            !isNaN(parseFloat(value)) &&\n            isFinite(value));\n    }\n};\nParseFloatPipe = tslib_1.__decorate([\n    (0, index_1.Injectable)(),\n    tslib_1.__param(0, (0, index_1.Optional)()),\n    tslib_1.__metadata(\"design:paramtypes\", [Object])\n], ParseFloatPipe);\nexports.ParseFloatPipe = ParseFloatPipe;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,cAAR,GAAyB,KAAK,CAA9B;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,OAAD,CAAvB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAME,yBAAyB,GAAGF,OAAO,CAAC,kCAAD,CAAzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIF,cAAc,GAAG,MAAMA,cAAN,CAAqB;EACtCK,WAAW,CAACC,OAAD,EAAU;IACjBA,OAAO,GAAGA,OAAO,IAAI,EAArB;IACA,MAAM;MAAEC,gBAAF;MAAoBC,mBAAmB,GAAGL,OAAO,CAACM,UAAR,CAAmBC;IAA7D,IAA6EJ,OAAnF;;IACA,KAAKC,gBAAL,GACIA,gBAAgB,KACXI,KAAK,IAAI,IAAIP,yBAAyB,CAACQ,eAA1B,CAA0CJ,mBAA1C,CAAJ,CAAmEG,KAAnE,CADE,CADpB;EAGH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACmB,MAATE,SAAS,CAACd,KAAD,EAAQe,QAAR,EAAkB;IAC7B,IAAI,CAAC,KAAKC,SAAL,CAAehB,KAAf,CAAL,EAA4B;MACxB,MAAM,KAAKQ,gBAAL,CAAsB,gDAAtB,CAAN;IACH;;IACD,OAAOS,UAAU,CAACjB,KAAD,CAAjB;EACH;EACD;AACJ;AACA;AACA;;;EACIgB,SAAS,CAAChB,KAAD,EAAQ;IACb,OAAQ,CAAC,QAAD,EAAW,QAAX,EAAqBkB,QAArB,CAA8B,OAAOlB,KAArC,KACJ,CAACmB,KAAK,CAACF,UAAU,CAACjB,KAAD,CAAX,CADF,IAEJoB,QAAQ,CAACpB,KAAD,CAFZ;EAGH;;AA7BqC,CAA1C;AA+BAC,cAAc,GAAGC,OAAO,CAACmB,UAAR,CAAmB,CAChC,CAAC,GAAGjB,OAAO,CAACkB,UAAZ,GADgC,EAEhCpB,OAAO,CAACqB,OAAR,CAAgB,CAAhB,EAAmB,CAAC,GAAGnB,OAAO,CAACoB,QAAZ,GAAnB,CAFgC,EAGhCtB,OAAO,CAACuB,UAAR,CAAmB,mBAAnB,EAAwC,CAAC5B,MAAD,CAAxC,CAHgC,CAAnB,EAIdI,cAJc,CAAjB;AAKAF,OAAO,CAACE,cAAR,GAAyBA,cAAzB"},"metadata":{},"sourceType":"script"}