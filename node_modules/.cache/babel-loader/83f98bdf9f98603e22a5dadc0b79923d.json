{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ValidationPipe = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst iterare_1 = require(\"iterare\");\n\nconst util_1 = require(\"util\");\n\nconst decorators_1 = require(\"../decorators\");\n\nconst core_1 = require(\"../decorators/core\");\n\nconst http_status_enum_1 = require(\"../enums/http-status.enum\");\n\nconst http_error_by_code_util_1 = require(\"../utils/http-error-by-code.util\");\n\nconst load_package_util_1 = require(\"../utils/load-package.util\");\n\nconst shared_utils_1 = require(\"../utils/shared.utils\");\n\nlet classValidator = {};\nlet classTransformer = {};\nlet ValidationPipe = class ValidationPipe {\n  constructor(options) {\n    options = options || {};\n\n    const {\n      transform,\n      disableErrorMessages,\n      errorHttpStatusCode,\n      expectedType,\n      transformOptions,\n      validateCustomDecorators\n    } = options,\n          validatorOptions = tslib_1.__rest(options, [\"transform\", \"disableErrorMessages\", \"errorHttpStatusCode\", \"expectedType\", \"transformOptions\", \"validateCustomDecorators\"]);\n\n    this.isTransformEnabled = !!transform;\n    this.validatorOptions = validatorOptions;\n    this.transformOptions = transformOptions;\n    this.isDetailedOutputDisabled = disableErrorMessages;\n    this.validateCustomDecorators = validateCustomDecorators || false;\n    this.errorHttpStatusCode = errorHttpStatusCode || http_status_enum_1.HttpStatus.BAD_REQUEST;\n    this.expectedType = expectedType;\n    this.exceptionFactory = options.exceptionFactory || this.createExceptionFactory();\n    classValidator = this.loadValidator(options.validatorPackage);\n    classTransformer = this.loadTransformer(options.transformerPackage);\n  }\n\n  loadValidator(validatorPackage) {\n    return validatorPackage !== null && validatorPackage !== void 0 ? validatorPackage : (0, load_package_util_1.loadPackage)('class-validator', 'ValidationPipe', () => require('class-validator'));\n  }\n\n  loadTransformer(transformerPackage) {\n    return transformerPackage !== null && transformerPackage !== void 0 ? transformerPackage : (0, load_package_util_1.loadPackage)('class-transformer', 'ValidationPipe', () => require('class-transformer'));\n  }\n\n  async transform(value, metadata) {\n    if (this.expectedType) {\n      metadata = Object.assign(Object.assign({}, metadata), {\n        metatype: this.expectedType\n      });\n    }\n\n    const metatype = metadata.metatype;\n\n    if (!metatype || !this.toValidate(metadata)) {\n      return this.isTransformEnabled ? this.transformPrimitive(value, metadata) : value;\n    }\n\n    const originalValue = value;\n    value = this.toEmptyIfNil(value);\n    const isNil = value !== originalValue;\n    const isPrimitive = this.isPrimitive(value);\n    this.stripProtoKeys(value);\n    let entity = classTransformer.plainToClass(metatype, value, this.transformOptions);\n    const originalEntity = entity;\n    const isCtorNotEqual = entity.constructor !== metatype;\n\n    if (isCtorNotEqual && !isPrimitive) {\n      entity.constructor = metatype;\n    } else if (isCtorNotEqual) {\n      // when \"entity\" is a primitive value, we have to temporarily\n      // replace the entity to perform the validation against the original\n      // metatype defined inside the handler\n      entity = {\n        constructor: metatype\n      };\n    }\n\n    const errors = await this.validate(entity, this.validatorOptions);\n\n    if (errors.length > 0) {\n      throw await this.exceptionFactory(errors);\n    }\n\n    if (isPrimitive) {\n      // if the value is a primitive value and the validation process has been successfully completed\n      // we have to revert the original value passed through the pipe\n      entity = originalEntity;\n    }\n\n    if (this.isTransformEnabled) {\n      return entity;\n    }\n\n    if (isNil) {\n      // if the value was originally undefined or null, revert it back\n      return originalValue;\n    }\n\n    return Object.keys(this.validatorOptions).length > 0 ? classTransformer.classToPlain(entity, this.transformOptions) : value;\n  }\n\n  createExceptionFactory() {\n    var _this = this;\n\n    return function () {\n      let validationErrors = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      if (_this.isDetailedOutputDisabled) {\n        return new http_error_by_code_util_1.HttpErrorByCode[_this.errorHttpStatusCode]();\n      }\n\n      const errors = _this.flattenValidationErrors(validationErrors);\n\n      return new http_error_by_code_util_1.HttpErrorByCode[_this.errorHttpStatusCode](errors);\n    };\n  }\n\n  toValidate(metadata) {\n    const {\n      metatype,\n      type\n    } = metadata;\n\n    if (type === 'custom' && !this.validateCustomDecorators) {\n      return false;\n    }\n\n    const types = [String, Boolean, Number, Array, Object, Buffer];\n    return !types.some(t => metatype === t) && !(0, shared_utils_1.isNil)(metatype);\n  }\n\n  transformPrimitive(value, metadata) {\n    if (!metadata.data) {\n      // leave top-level query/param objects unmodified\n      return value;\n    }\n\n    const {\n      type,\n      metatype\n    } = metadata;\n\n    if (type !== 'param' && type !== 'query') {\n      return value;\n    }\n\n    if (metatype === Boolean) {\n      return value === true || value === 'true';\n    }\n\n    if (metatype === Number) {\n      return +value;\n    }\n\n    return value;\n  }\n\n  toEmptyIfNil(value) {\n    return (0, shared_utils_1.isNil)(value) ? {} : value;\n  }\n\n  stripProtoKeys(value) {\n    if (value == null || typeof value !== 'object' || util_1.types.isTypedArray(value)) {\n      return;\n    }\n\n    if (Array.isArray(value)) {\n      for (const v of value) {\n        this.stripProtoKeys(v);\n      }\n\n      return;\n    }\n\n    delete value.__proto__;\n\n    for (const key in value) {\n      this.stripProtoKeys(value[key]);\n    }\n  }\n\n  isPrimitive(value) {\n    return ['number', 'boolean', 'string'].includes(typeof value);\n  }\n\n  validate(object, validatorOptions) {\n    return classValidator.validate(object, validatorOptions);\n  }\n\n  flattenValidationErrors(validationErrors) {\n    return (0, iterare_1.iterate)(validationErrors).map(error => this.mapChildrenToValidationErrors(error)).flatten().filter(item => !!item.constraints).map(item => Object.values(item.constraints)).flatten().toArray();\n  }\n\n  mapChildrenToValidationErrors(error, parentPath) {\n    if (!(error.children && error.children.length)) {\n      return [error];\n    }\n\n    const validationErrors = [];\n    parentPath = parentPath ? `${parentPath}.${error.property}` : error.property;\n\n    for (const item of error.children) {\n      if (item.children && item.children.length) {\n        validationErrors.push(...this.mapChildrenToValidationErrors(item, parentPath));\n      }\n\n      validationErrors.push(this.prependConstraintsWithParentProp(parentPath, item));\n    }\n\n    return validationErrors;\n  }\n\n  prependConstraintsWithParentProp(parentPath, error) {\n    const constraints = {};\n\n    for (const key in error.constraints) {\n      constraints[key] = `${parentPath}.${error.constraints[key]}`;\n    }\n\n    return Object.assign(Object.assign({}, error), {\n      constraints\n    });\n  }\n\n};\nValidationPipe = tslib_1.__decorate([(0, core_1.Injectable)(), tslib_1.__param(0, (0, decorators_1.Optional)()), tslib_1.__metadata(\"design:paramtypes\", [Object])], ValidationPipe);\nexports.ValidationPipe = ValidationPipe;","map":{"version":3,"names":["Object","defineProperty","exports","value","ValidationPipe","tslib_1","require","iterare_1","util_1","decorators_1","core_1","http_status_enum_1","http_error_by_code_util_1","load_package_util_1","shared_utils_1","classValidator","classTransformer","constructor","options","transform","disableErrorMessages","errorHttpStatusCode","expectedType","transformOptions","validateCustomDecorators","validatorOptions","__rest","isTransformEnabled","isDetailedOutputDisabled","HttpStatus","BAD_REQUEST","exceptionFactory","createExceptionFactory","loadValidator","validatorPackage","loadTransformer","transformerPackage","loadPackage","metadata","assign","metatype","toValidate","transformPrimitive","originalValue","toEmptyIfNil","isNil","isPrimitive","stripProtoKeys","entity","plainToClass","originalEntity","isCtorNotEqual","errors","validate","length","keys","classToPlain","validationErrors","HttpErrorByCode","flattenValidationErrors","type","types","String","Boolean","Number","Array","Buffer","some","t","data","isTypedArray","isArray","v","__proto__","key","includes","object","iterate","map","error","mapChildrenToValidationErrors","flatten","filter","item","constraints","values","toArray","parentPath","children","property","push","prependConstraintsWithParentProp","__decorate","Injectable","__param","Optional","__metadata"],"sources":["C:/Users/Admin/Desktop/NikeShoes/node_modules/@nestjs/common/pipes/validation.pipe.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ValidationPipe = void 0;\nconst tslib_1 = require(\"tslib\");\nconst iterare_1 = require(\"iterare\");\nconst util_1 = require(\"util\");\nconst decorators_1 = require(\"../decorators\");\nconst core_1 = require(\"../decorators/core\");\nconst http_status_enum_1 = require(\"../enums/http-status.enum\");\nconst http_error_by_code_util_1 = require(\"../utils/http-error-by-code.util\");\nconst load_package_util_1 = require(\"../utils/load-package.util\");\nconst shared_utils_1 = require(\"../utils/shared.utils\");\nlet classValidator = {};\nlet classTransformer = {};\nlet ValidationPipe = class ValidationPipe {\n    constructor(options) {\n        options = options || {};\n        const { transform, disableErrorMessages, errorHttpStatusCode, expectedType, transformOptions, validateCustomDecorators } = options, validatorOptions = tslib_1.__rest(options, [\"transform\", \"disableErrorMessages\", \"errorHttpStatusCode\", \"expectedType\", \"transformOptions\", \"validateCustomDecorators\"]);\n        this.isTransformEnabled = !!transform;\n        this.validatorOptions = validatorOptions;\n        this.transformOptions = transformOptions;\n        this.isDetailedOutputDisabled = disableErrorMessages;\n        this.validateCustomDecorators = validateCustomDecorators || false;\n        this.errorHttpStatusCode = errorHttpStatusCode || http_status_enum_1.HttpStatus.BAD_REQUEST;\n        this.expectedType = expectedType;\n        this.exceptionFactory =\n            options.exceptionFactory || this.createExceptionFactory();\n        classValidator = this.loadValidator(options.validatorPackage);\n        classTransformer = this.loadTransformer(options.transformerPackage);\n    }\n    loadValidator(validatorPackage) {\n        return (validatorPackage !== null && validatorPackage !== void 0 ? validatorPackage : (0, load_package_util_1.loadPackage)('class-validator', 'ValidationPipe', () => require('class-validator')));\n    }\n    loadTransformer(transformerPackage) {\n        return (transformerPackage !== null && transformerPackage !== void 0 ? transformerPackage : (0, load_package_util_1.loadPackage)('class-transformer', 'ValidationPipe', () => require('class-transformer')));\n    }\n    async transform(value, metadata) {\n        if (this.expectedType) {\n            metadata = Object.assign(Object.assign({}, metadata), { metatype: this.expectedType });\n        }\n        const metatype = metadata.metatype;\n        if (!metatype || !this.toValidate(metadata)) {\n            return this.isTransformEnabled\n                ? this.transformPrimitive(value, metadata)\n                : value;\n        }\n        const originalValue = value;\n        value = this.toEmptyIfNil(value);\n        const isNil = value !== originalValue;\n        const isPrimitive = this.isPrimitive(value);\n        this.stripProtoKeys(value);\n        let entity = classTransformer.plainToClass(metatype, value, this.transformOptions);\n        const originalEntity = entity;\n        const isCtorNotEqual = entity.constructor !== metatype;\n        if (isCtorNotEqual && !isPrimitive) {\n            entity.constructor = metatype;\n        }\n        else if (isCtorNotEqual) {\n            // when \"entity\" is a primitive value, we have to temporarily\n            // replace the entity to perform the validation against the original\n            // metatype defined inside the handler\n            entity = { constructor: metatype };\n        }\n        const errors = await this.validate(entity, this.validatorOptions);\n        if (errors.length > 0) {\n            throw await this.exceptionFactory(errors);\n        }\n        if (isPrimitive) {\n            // if the value is a primitive value and the validation process has been successfully completed\n            // we have to revert the original value passed through the pipe\n            entity = originalEntity;\n        }\n        if (this.isTransformEnabled) {\n            return entity;\n        }\n        if (isNil) {\n            // if the value was originally undefined or null, revert it back\n            return originalValue;\n        }\n        return Object.keys(this.validatorOptions).length > 0\n            ? classTransformer.classToPlain(entity, this.transformOptions)\n            : value;\n    }\n    createExceptionFactory() {\n        return (validationErrors = []) => {\n            if (this.isDetailedOutputDisabled) {\n                return new http_error_by_code_util_1.HttpErrorByCode[this.errorHttpStatusCode]();\n            }\n            const errors = this.flattenValidationErrors(validationErrors);\n            return new http_error_by_code_util_1.HttpErrorByCode[this.errorHttpStatusCode](errors);\n        };\n    }\n    toValidate(metadata) {\n        const { metatype, type } = metadata;\n        if (type === 'custom' && !this.validateCustomDecorators) {\n            return false;\n        }\n        const types = [String, Boolean, Number, Array, Object, Buffer];\n        return !types.some(t => metatype === t) && !(0, shared_utils_1.isNil)(metatype);\n    }\n    transformPrimitive(value, metadata) {\n        if (!metadata.data) {\n            // leave top-level query/param objects unmodified\n            return value;\n        }\n        const { type, metatype } = metadata;\n        if (type !== 'param' && type !== 'query') {\n            return value;\n        }\n        if (metatype === Boolean) {\n            return value === true || value === 'true';\n        }\n        if (metatype === Number) {\n            return +value;\n        }\n        return value;\n    }\n    toEmptyIfNil(value) {\n        return (0, shared_utils_1.isNil)(value) ? {} : value;\n    }\n    stripProtoKeys(value) {\n        if (value == null ||\n            typeof value !== 'object' ||\n            util_1.types.isTypedArray(value)) {\n            return;\n        }\n        if (Array.isArray(value)) {\n            for (const v of value) {\n                this.stripProtoKeys(v);\n            }\n            return;\n        }\n        delete value.__proto__;\n        for (const key in value) {\n            this.stripProtoKeys(value[key]);\n        }\n    }\n    isPrimitive(value) {\n        return ['number', 'boolean', 'string'].includes(typeof value);\n    }\n    validate(object, validatorOptions) {\n        return classValidator.validate(object, validatorOptions);\n    }\n    flattenValidationErrors(validationErrors) {\n        return (0, iterare_1.iterate)(validationErrors)\n            .map(error => this.mapChildrenToValidationErrors(error))\n            .flatten()\n            .filter(item => !!item.constraints)\n            .map(item => Object.values(item.constraints))\n            .flatten()\n            .toArray();\n    }\n    mapChildrenToValidationErrors(error, parentPath) {\n        if (!(error.children && error.children.length)) {\n            return [error];\n        }\n        const validationErrors = [];\n        parentPath = parentPath\n            ? `${parentPath}.${error.property}`\n            : error.property;\n        for (const item of error.children) {\n            if (item.children && item.children.length) {\n                validationErrors.push(...this.mapChildrenToValidationErrors(item, parentPath));\n            }\n            validationErrors.push(this.prependConstraintsWithParentProp(parentPath, item));\n        }\n        return validationErrors;\n    }\n    prependConstraintsWithParentProp(parentPath, error) {\n        const constraints = {};\n        for (const key in error.constraints) {\n            constraints[key] = `${parentPath}.${error.constraints[key]}`;\n        }\n        return Object.assign(Object.assign({}, error), { constraints });\n    }\n};\nValidationPipe = tslib_1.__decorate([\n    (0, core_1.Injectable)(),\n    tslib_1.__param(0, (0, decorators_1.Optional)()),\n    tslib_1.__metadata(\"design:paramtypes\", [Object])\n], ValidationPipe);\nexports.ValidationPipe = ValidationPipe;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}