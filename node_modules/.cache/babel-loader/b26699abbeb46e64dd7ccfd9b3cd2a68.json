{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mixin = exports.Injectable = void 0;\n\nconst uuid_1 = require(\"uuid\");\n\nconst constants_1 = require(\"../../constants\");\n/**\n * Decorator that marks a class as a [provider](https://docs.nestjs.com/providers).\n * Providers can be injected into other classes via constructor parameter injection\n * using Nest's built-in [Dependency Injection (DI)](https://docs.nestjs.com/providers#dependency-injection)\n * system.\n *\n * When injecting a provider, it must be visible within the module scope (loosely\n * speaking, the containing module) of the class it is being injected into. This\n * can be done by:\n *\n * - defining the provider in the same module scope\n * - exporting the provider from one module scope and importing that module into the\n *   module scope of the class being injected into\n * - exporting the provider from a module that is marked as global using the\n *   `@Global()` decorator\n *\n * Providers can also be defined in a more explicit and imperative form using\n * various [custom provider](https://docs.nestjs.com/fundamentals/custom-providers) techniques that expose\n * more capabilities of the DI system.\n *\n * @param options options specifying scope of injectable\n *\n * @see [Providers](https://docs.nestjs.com/providers)\n * @see [Custom Providers](https://docs.nestjs.com/fundamentals/custom-providers)\n * @see [Injection Scopes](https://docs.nestjs.com/fundamentals/injection-scopes)\n *\n * @publicApi\n */\n\n\nfunction Injectable(options) {\n  return target => {\n    Reflect.defineMetadata(constants_1.INJECTABLE_WATERMARK, true, target);\n    Reflect.defineMetadata(constants_1.SCOPE_OPTIONS_METADATA, options, target);\n  };\n}\n\nexports.Injectable = Injectable;\n\nfunction mixin(mixinClass) {\n  Object.defineProperty(mixinClass, 'name', {\n    value: (0, uuid_1.v4)()\n  });\n  Injectable()(mixinClass);\n  return mixinClass;\n}\n\nexports.mixin = mixin;","map":{"version":3,"names":["Object","defineProperty","exports","value","mixin","Injectable","uuid_1","require","constants_1","options","target","Reflect","defineMetadata","INJECTABLE_WATERMARK","SCOPE_OPTIONS_METADATA","mixinClass","v4"],"sources":["C:/Users/Admin/Desktop/NikeShoes/node_modules/@nestjs/common/decorators/core/injectable.decorator.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mixin = exports.Injectable = void 0;\nconst uuid_1 = require(\"uuid\");\nconst constants_1 = require(\"../../constants\");\n/**\n * Decorator that marks a class as a [provider](https://docs.nestjs.com/providers).\n * Providers can be injected into other classes via constructor parameter injection\n * using Nest's built-in [Dependency Injection (DI)](https://docs.nestjs.com/providers#dependency-injection)\n * system.\n *\n * When injecting a provider, it must be visible within the module scope (loosely\n * speaking, the containing module) of the class it is being injected into. This\n * can be done by:\n *\n * - defining the provider in the same module scope\n * - exporting the provider from one module scope and importing that module into the\n *   module scope of the class being injected into\n * - exporting the provider from a module that is marked as global using the\n *   `@Global()` decorator\n *\n * Providers can also be defined in a more explicit and imperative form using\n * various [custom provider](https://docs.nestjs.com/fundamentals/custom-providers) techniques that expose\n * more capabilities of the DI system.\n *\n * @param options options specifying scope of injectable\n *\n * @see [Providers](https://docs.nestjs.com/providers)\n * @see [Custom Providers](https://docs.nestjs.com/fundamentals/custom-providers)\n * @see [Injection Scopes](https://docs.nestjs.com/fundamentals/injection-scopes)\n *\n * @publicApi\n */\nfunction Injectable(options) {\n    return (target) => {\n        Reflect.defineMetadata(constants_1.INJECTABLE_WATERMARK, true, target);\n        Reflect.defineMetadata(constants_1.SCOPE_OPTIONS_METADATA, options, target);\n    };\n}\nexports.Injectable = Injectable;\nfunction mixin(mixinClass) {\n    Object.defineProperty(mixinClass, 'name', {\n        value: (0, uuid_1.v4)(),\n    });\n    Injectable()(mixinClass);\n    return mixinClass;\n}\nexports.mixin = mixin;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,KAAR,GAAgBF,OAAO,CAACG,UAAR,GAAqB,KAAK,CAA1C;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,MAAD,CAAtB;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,iBAAD,CAA3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,UAAT,CAAoBI,OAApB,EAA6B;EACzB,OAAQC,MAAD,IAAY;IACfC,OAAO,CAACC,cAAR,CAAuBJ,WAAW,CAACK,oBAAnC,EAAyD,IAAzD,EAA+DH,MAA/D;IACAC,OAAO,CAACC,cAAR,CAAuBJ,WAAW,CAACM,sBAAnC,EAA2DL,OAA3D,EAAoEC,MAApE;EACH,CAHD;AAIH;;AACDR,OAAO,CAACG,UAAR,GAAqBA,UAArB;;AACA,SAASD,KAAT,CAAeW,UAAf,EAA2B;EACvBf,MAAM,CAACC,cAAP,CAAsBc,UAAtB,EAAkC,MAAlC,EAA0C;IACtCZ,KAAK,EAAE,CAAC,GAAGG,MAAM,CAACU,EAAX;EAD+B,CAA1C;EAGAX,UAAU,GAAGU,UAAH,CAAV;EACA,OAAOA,UAAP;AACH;;AACDb,OAAO,CAACE,KAAR,GAAgBA,KAAhB"},"metadata":{},"sourceType":"script"}